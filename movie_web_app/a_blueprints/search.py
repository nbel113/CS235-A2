import osfrom flask import Blueprint, flash, render_template, request, redirect, url_forfrom flask_wtf import FlaskFormfrom wtforms import Form, StringField, SelectField, SubmitFieldimport movie_web_app.a_adapters.repository as repoimport mathsearch_blueprint = Blueprint(    'search_bp', __name__)@search_blueprint.route('/search', methods=['GET', 'POST'])def search():    search = SearchForm(request.form)    if request.method == 'POST': #search.validate_on_submit():        title_search = search.title_search.data        director_search = search.director_search.data        actors_search = search.actors_search.data        genres_search = search.genres_search.data        return redirect(url_for('search_bp.results',                                title_search=title_search,                                director_search=director_search,                                actors_search=actors_search,                                genres_search=genres_search,                                page_num=1))    return render_template(        'search/search.html',        form=search,    )@search_blueprint.route('/results', methods=['GET'])def results():    repo_inst = repo.repo_instance    movies_per_page = 15    # Read query parameters.    page_num = request.args.get('page_num')    title_search = request.args.get('title_search')    director_search = request.args.get('director_search')    actors_search = request.args.get('actors_search')    genres_search = request.args.get('genres_search')    title_search_result = repo_inst.get_movies_by_search_title(title_search)    print(title_search_result)    director_search_result = repo_inst.get_movies_by_search_director(director_search)    print(director_search_result)    actors_search_result = repo_inst.get_movies_by_search_actor(actors_search)    print(actors_search_result)    genres_search_result = repo_inst.get_movies_by_search_genre(genres_search)    print(genres_search_result)    results = []    args = []  # list for the arguments    search_results_lists = [        title_search_result,        director_search_result,        actors_search_result,        genres_search_result    ]    for i in range(len(search_results_lists)):        if search_results_lists[i] is not None:            args.append(set(search_results_lists[i]))    if len(args) == 0:        flash('No results found!')        return redirect('/search')    """    https://www.kite.com/python/answers/how-to-find-the-intersection-of-two-lists-in-python#:~:text=Use%20set.,list%20using%20list(iterable)%20.    """    intersection_set = set.intersection(*args)  # *args means variable number of positional arguments    intersection_list = list(intersection_set)    print(intersection_list)    if intersection_list is not None:        results = intersection_list        # print(results)    if page_num is None:        # No page_num query parameter, so initialise page_num to start at the beginning.        page_num = 0    else:        # Convert page_num from string to int.        page_num = int(page_num)    #print()    last_page = math.ceil(len(results) / movies_per_page)    if (page_num <= 0 or page_num > last_page):        return redirect(url_for('search_bp.results',                                    title_search=title_search,                                    director_search=director_search,                                    actors_search=actors_search,                                    genres_search=genres_search,                                    page_num=1))    first_article_url = None    prev_article_url = None    next_article_url = None    last_article_url = None    page_total = (page_num - 1) * movies_per_page    listing = results[page_total:page_total + movies_per_page]    if page_num > 1:        prev_article_url = url_for('search_bp.results',                                    title_search=title_search,                                    director_search=director_search,                                    actors_search=actors_search,                                    genres_search=genres_search,                                    page_num=page_num - 1)        first_article_url = url_for('search_bp.results',                                    title_search=title_search,                                    director_search=director_search,                                    actors_search=actors_search,                                    genres_search=genres_search,                                    page_num=1)    if (page_num * movies_per_page) < len(results):        next_article_url = url_for('search_bp.results',                                    title_search=title_search,                                    director_search=director_search,                                    actors_search=actors_search,                                    genres_search=genres_search,                                    page_num=page_num + 1)        last_article_url = url_for('search_bp.results',                                    title_search=title_search,                                    director_search=director_search,                                    actors_search=actors_search,                                    genres_search=genres_search,                                    page_num=last_page)    if not results:        flash('No results found!')        return redirect('/search')    # display results    return render_template(        'search/results.html',        page_num=page_num,        last_page=last_page,        listing=listing,        page_total=page_total,        movies_per_page=movies_per_page,        movie_list_length=len(results),        search_url=url_for('search_bp.search'),        to_page_url=url_for('search_bp.results'),        first_article_url=first_article_url,        last_article_url=last_article_url,        next_article_url=next_article_url,        prev_article_url=prev_article_url,        results=results    )class SearchForm(FlaskForm):    title_search = StringField('')    director_search = StringField('')    actors_search = StringField('')    genres_search = StringField('')    submit = SubmitField('Search')